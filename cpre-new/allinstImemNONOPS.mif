DEPTH=1024; 	% Memory depth and width are required
		% DEPTH is the number of addresses
WIDTH = 32; 	% WIDTH is the number of bits of data per word
		% DEPTH and WIDTH should be entered as decimal numbers

ADDRESS_RADIX = DEC; 	% Address and value radixes are required
DATA_RADIX = BIN; 	% Enter BIN, DEC, HEX, OCT, or UNS; unless
			% otherwise specified, radixes = HEX

-- Specify values for addresses, which can be single address or range
-- SOME THINGS TO CONSIDER
-- 1) This memory is word-addressable, versus the MIPS conceptual byte-addressable memory.
--    This means that address 1 corresponds to word 1, address 2 corresponds to word 2, etc.
--    Since MIPS will be generating byte addresses, you will have to create some (very simple)
--    logic in your VHDL wrapper to deal with byte/word offsets.
-- 2) The "single address" notation seems to be least likely to cause confusion so that is what
--    I recommend.
-- 3) The values need to be in 32-bit hex form (i.e. don't use F when you really mean 0000000F).

-- OOOOOLLLLLLLLLLDDDDDDDDDDDD BEFORE NOPS

CONTENT
BEGIN

0:

00100000000010000000000000000101

00100101000010010000000000000010

00000001000010010101000000100000

00000001010010010101100000100010

00010001011010000000000000000001

00100001000010000000000000000001

00100000000010000000000000000011

00000000000010000100100010000000

00010101010010010000000000000100

00011001010000000000000000000100

00101001000010110000000000001101

00110101011011000000000000000000

00001000000000000000000000001111

00100001000010000000000000000001

00100001000010000000000000000001

00000001100010110110000000100001

00000001100010110110100000000100

00000000000011010111000001000010

00000001011011100111100000000110

00100000000011001111111111111111

00000001100011000110100000100100

00000101101000010000000000000010

00000001111011101000000000000111

00001100000000000000000000011001

00100001000010000000000000000001

00000010000000001000100000100011

10101110001100000000000000000000

10001110001010000000000000000000

00000001000011000101000000100110

00100000000010100000000000001010

00000001100010100101100000101010

00000001100010100110100000101011

00000000000011000110001010000011

00011101100000000000000000000010

00110001100010000000000000001111

00000101000100010000000000000001

00100001000010000000000000000001

00101101101010101111111111111111

00000101100000000000000000000001

00100001000010000000000000000001

00100000000010000000000011110000

00100000000010010000000000001111

00000001000010010101000000100101

00111001010010111111111111111111

00111100000011111111111111111111

00000001111010111001000000100111

00001000000000000000000000110000

00100001000010000000000000000001

00100000000010001111111111110110

00000101000100000000000000000001

00100001000010000000000000000001

00000010000000001000100000100011

00100000000010000000000000000010

10100010001010000000000000000000

00000000000100011000100010000000

10100110001010000000000000000000

10000010001010100000000000000000

10000110001010110000000000000000

10010010001011000000000000000000

10010110001011010000000000000000;

END;
